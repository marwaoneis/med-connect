{"version":3,"sources":["pharmacy.controller.js"],"names":["Pharmacy","require","createPharmacy","req","res","pharmacy","regeneratorRuntime","async","_context","prev","next","awrap","save","status","json","t0","error","message","stop","getAllPharmacies","pharmacies","_context2","find","sent","_context3","findById","params","id","abrupt","pharmacyId","updateData","updatedPharmacy","_context4","body","username","password","address","phone","deletePharmacyById","_context5","findByIdAndDelete","getPharmacyByUsername","_context6","findOne","_context7","module","exports","updatePharmacyById","getPharmaciesByAddress"],"mappings":"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","file":"pharmacy.controller.min.js","sourcesContent":["const Pharmacy = require(\"./../models/pharmacy.model\");\n\n// Create a new pharmacy\nconst createPharmacy = async (req, res) => {\n  try {\n    const pharmacy = new Pharmacy(req.body);\n    await pharmacy.save();\n    res.status(201).json(pharmacy);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\n// Get all pharmacies\nconst getAllPharmacies = async (req, res) => {\n  try {\n    const pharmacies = await Pharmacy.find();\n    res.status(200).json(pharmacies);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get a single pharmacy by ID\nconst getPharmacyById = async (req, res) => {\n  try {\n    const pharmacy = await Pharmacy.findById(req.params.id);\n    if (!pharmacy) {\n      return res.status(404).json({ error: \"Pharmacy not found\" });\n    }\n    res.status(200).json(pharmacy);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a pharmacy by ID\nconst updatePharmacyById = async (req, res) => {\n  try {\n    const pharmacyId = req.params.id;\n    const updateData = req.body;\n\n    const pharmacy = await Pharmacy.findById(pharmacyId);\n\n    if (!pharmacy) {\n      return res.status(404).json({ error: \"Pharmacy not found\" });\n    }\n\n    if (updateData.username) pharmacy.username = updateData.username;\n    if (updateData.password) pharmacy.password = updateData.password;\n    if (updateData.address) pharmacy.address = updateData.address;\n    if (updateData.phone) pharmacy.phone = updateData.phone;\n\n    const updatedPharmacy = await pharmacy.save();\n\n    res.status(200).json(updatedPharmacy);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete a pharmacy by ID\nconst deletePharmacyById = async (req, res) => {\n  try {\n    const pharmacy = await Pharmacy.findByIdAndDelete(req.params.id);\n    if (!pharmacy) {\n      return res.status(404).json({ error: \"Pharmacy not found\" });\n    }\n    res.status(200).json({ message: \"Pharmacy Deleted\" });\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get pharmacy by username\nconst getPharmacyByUsername = async (req, res) => {\n  try {\n    const pharmacy = await Pharmacy.findOne({ username: req.params.username });\n    if (!pharmacy) {\n      return res.status(404).json({ error: \"Pharmacy not found\" });\n    }\n    res.status(200).json(pharmacy);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get pharmacies by address\nconst getPharmaciesByAddress = async (req, res) => {\n  try {\n    const pharmacies = await Pharmacy.find({ address: req.params.address });\n    res.status(200).json(pharmacies);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\nmodule.exports = {\n  createPharmacy,\n  getAllPharmacies,\n  getPharmacyById,\n  updatePharmacyById,\n  deletePharmacyById,\n  getPharmacyByUsername,\n  getPharmaciesByAddress,\n};\n"]}