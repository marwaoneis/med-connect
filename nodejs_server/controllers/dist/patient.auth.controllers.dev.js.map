{"version":3,"sources":["patient.auth.controllers.js"],"names":["require","generateToken","sendResponseWithToken","bcrypt","Patient","exports","registerPatient","req","res","patient","body","save","status","json","error","message","loginPatient","console","log","username","password","findOne","compare","isMatch"],"mappings":";;eAAiDA,OAAO,CAAC,qBAAD,C;IAAhDC,a,YAAAA,a;IAAeC,qB,YAAAA,qB;;AACvB,IAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMI,OAAO,GAAGJ,OAAO,CAAC,yBAAD,CAAvB;;AAEAK,OAAO,CAACC,eAAR,GAA0B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtB;AACMC,UAAAA,OAHgB,GAGN,IAAIL,OAAJ,CAAYG,GAAG,CAACG,IAAhB,CAHM;AAAA;AAAA,0CAIhBD,OAAO,CAACE,IAAR,EAJgB;;AAAA;AAMtB;AACAT,UAAAA,qBAAqB,CAACO,OAAD,EAAU,GAAV,EAAeD,GAAf,CAArB;AAPsB;AAAA;;AAAA;AAAA;AAAA;AAStBA,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,KAAK,EAAE,YAAMC;AAAf,WAArB;;AATsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAaAV,OAAO,CAACW,YAAR,GAAuB,kBAAOT,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBS,UAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AADqB;AAAA,sBAIYX,GAAG,CAACG,IAJhB,EAIXS,QAJW,aAIXA,QAJW,EAIDC,QAJC,aAIDA,QAJC,EAMnB;;AANmB;AAAA,0CAOGhB,OAAO,CAACiB,OAAR,CAAgB;AAAEF,YAAAA,QAAQ,EAARA;AAAF,WAAhB,CAPH;;AAAA;AAObV,UAAAA,OAPa;;AAAA,cAQdA,OARc;AAAA;AAAA;AAAA;;AAAA,4CASVD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAArB,CATU;;AAAA;AAAA;AAAA,0CAaGX,MAAM,CAACmB,OAAP,CAAeF,QAAf,EAAyBX,OAAO,CAACW,QAAjC,CAbH;;AAAA;AAabG,UAAAA,OAba;;AAAA,cAcdA,OAdc;AAAA;AAAA;AAAA;;AAAA,4CAeVf,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAArB,CAfU;;AAAA;AAkBnB;AACAZ,UAAAA,qBAAqB,CAACO,OAAD,EAAU,GAAV,EAAeD,GAAf,CAArB;AAnBmB;AAAA;;AAAA;AAAA;AAAA;AAqBnBA,UAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,KAAK,EAAE,aAAMC;AAAf,WAArB;;AArBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB","sourcesContent":["const { generateToken, sendResponseWithToken } = require(\"../utils/auth.utils\");\nconst bcrypt = require(\"bcrypt\");\n\nconst Patient = require(\"../models/patient.model\");\n\nexports.registerPatient = async (req, res) => {\n  try {\n    // Create new patient\n    const patient = new Patient(req.body);\n    await patient.save();\n\n    // Send response with token\n    sendResponseWithToken(patient, 201, res);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\nexports.loginPatient = async (req, res) => {\n  console.log(\"Received login request for patient\");\n\n  try {\n    const { username, password } = req.body;\n\n    // Check if patient exists\n    const patient = await Patient.findOne({ username });\n    if (!patient) {\n      return res.status(401).json({ error: \"Invalid login credentials\" });\n    }\n\n    // Check if password matches\n    const isMatch = await bcrypt.compare(password, patient.password);\n    if (!isMatch) {\n      return res.status(401).json({ error: \"Invalid login credentials\" });\n    }\n\n    // Send response with token\n    sendResponseWithToken(patient, 200, res);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n"],"file":"patient.auth.controllers.dev.js"}