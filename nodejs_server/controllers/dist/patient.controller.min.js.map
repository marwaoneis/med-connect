{"version":3,"sources":["patient.controller.js"],"names":["Patient","require","getAllPatients","req","res","patients","regeneratorRuntime","async","_context","prev","next","awrap","find","sent","status","json","t0","error","stop","getPatient","patient","_context2","params","id","findById","abrupt","createPatient","_req$body","username","password","firstName","lastName","email","address","phone","dateOfBirth","gender","_context3","body","save","updatePatient","patientId","updateData","updatedPatient","_context4","message","deletePatient","_context5","findByIdAndDelete","key","value","findByIdAndUpdate","$set","_defineProperty","concat","new","$unset","module","exports"],"mappings":"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","file":"patient.controller.min.js","sourcesContent":["const Patient = require(\"../models/patient.model\");\n\n// Get all patients\nconst getAllPatients = async (req, res) => {\n  try {\n    const patients = await Patient.find();\n    res.status(200).json(patients);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get a specific patient by ID\nconst getPatient = async (req, res) => {\n  try {\n    if (!req.params.id) {\n      res\n        .status(400)\n        .json({ error: \"Bad Request, PatientId Id should be provided\" });\n    }\n    const patient = await Patient.findById(req.params.id);\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Create a new patient\nconst createPatient = async (req, res) => {\n  try {\n    // Validate required parameters\n    const {\n      username,\n      password,\n      firstName,\n      lastName,\n      email,\n      address,\n      phone,\n      dateOfBirth,\n      gender,\n    } = req.body;\n    if (\n      !username ||\n      !password ||\n      !firstName ||\n      !lastName ||\n      !email ||\n      !address ||\n      !phone ||\n      !dateOfBirth ||\n      !gender\n    ) {\n      return res\n        .status(400)\n        .json({ error: \"All required parameters must be provided\" });\n    }\n\n    const patient = new Patient(req.body);\n    await patient.save();\n    res.status(201).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a patient by ID\nconst updatePatient = async (req, res) => {\n  try {\n    const patientId = req.params.id;\n    const updateData = req.body;\n\n    // Find the patient document\n    const patient = await Patient.findById(patientId);\n\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n\n    if (updateData.username) patient.username = updateData.username;\n    if (updateData.password) patient.password = updateData.password;\n    if (updateData.firstName) patient.firstName = updateData.firstName;\n    if (updateData.lastName) patient.lastName = updateData.lastName;\n    if (updateData.email) patient.email = updateData.email;\n    if (updateData.address) patient.address = updateData.address;\n    if (updateData.phone) patient.phone = updateData.phone;\n    if (updateData.dateOfBirth) patient.dateOfBirth = updateData.dateOfBirth;\n    if (updateData.gender) patient.gender = updateData.gender;\n\n    // Save the document\n    const updatedPatient = await patient.save();\n\n    res.status(200).json(updatedPatient);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\n// Delete a patient by ID\nconst deletePatient = async (req, res) => {\n  try {\n    const patient = await Patient.findByIdAndDelete(req.params.id);\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n    res.status(200).json({ message: \"Patient deleted\" });\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Insert entry to additional info in a patient by ID\nconst insertAdditionalInfo = async (req, res) => {\n  try {\n    const { key, value } = req.body;\n\n    // Check if key and value are present for insertion\n    if (!key || !value) {\n      return res\n        .status(400)\n        .json({ error: \"Both key and value must be provided for insertion\" });\n    }\n\n    const patient = await Patient.findByIdAndUpdate(\n      req.params.id,\n      { $set: { [`additionalInfo.${key}`]: value } }, // Use $set to insert the key-value pair\n      { new: true }\n    );\n\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete entry from additional info in a patient by ID\nconst deleteAdditionalInfo = async (req, res) => {\n  try {\n    const { key } = req.params;\n\n    // Check if key is present for deletion\n    if (!key) {\n      return res\n        .status(400)\n        .json({ error: \"Key must be provided for deletion\" });\n    }\n\n    const patient = await Patient.findByIdAndUpdate(\n      req.params.id,\n      { $unset: { [`additionalInfo.${key}`]: 1 } }, // Use $unset to delete the key-value pair\n      { new: true }\n    );\n\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\nmodule.exports = {\n  getAllPatients,\n  getPatient,\n  createPatient,\n  updatePatient,\n  deletePatient,\n  insertAdditionalInfo,\n  deleteAdditionalInfo,\n};\n"]}