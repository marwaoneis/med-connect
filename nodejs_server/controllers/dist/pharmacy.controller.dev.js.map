{"version":3,"sources":["pharmacy.controller.js"],"names":["Pharmacy","require","createPharmacy","req","res","pharmacy","body","save","status","json","error","message","getAllPharmacies","find","pharmacies","getPharmacyById","findById","params","id","updatePharmacyById","pharmacyId","updateData","username","password","address","phone","updatedPharmacy","deletePharmacyById","findByIdAndDelete","getPharmacyByUsername","findOne","getPharmaciesByAddress","module","exports"],"mappings":"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","sourcesContent":["const Pharmacy = require(\"./../models/pharmacy.model\");\n\n// Create a new pharmacy\nconst createPharmacy = async (req, res) => {\n  try {\n    const pharmacy = new Pharmacy(req.body);\n    await pharmacy.save();\n    res.status(201).json(pharmacy);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\n// Get all pharmacies\nconst getAllPharmacies = async (req, res) => {\n  try {\n    const pharmacies = await Pharmacy.find();\n    res.status(200).json(pharmacies);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get a single pharmacy by ID\nconst getPharmacyById = async (req, res) => {\n  try {\n    const pharmacy = await Pharmacy.findById(req.params.id);\n    if (!pharmacy) {\n      return res.status(404).json({ error: \"Pharmacy not found\" });\n    }\n    res.status(200).json(pharmacy);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a pharmacy by ID\nconst updatePharmacyById = async (req, res) => {\n  try {\n    const pharmacyId = req.params.id;\n    const updateData = req.body;\n\n    const pharmacy = await Pharmacy.findById(pharmacyId);\n\n    if (!pharmacy) {\n      return res.status(404).json({ error: \"Pharmacy not found\" });\n    }\n\n    if (updateData.username) pharmacy.username = updateData.username;\n    if (updateData.password) pharmacy.password = updateData.password;\n    if (updateData.address) pharmacy.address = updateData.address;\n    if (updateData.phone) pharmacy.phone = updateData.phone;\n\n    const updatedPharmacy = await pharmacy.save();\n\n    res.status(200).json(updatedPharmacy);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete a pharmacy by ID\nconst deletePharmacyById = async (req, res) => {\n  try {\n    const pharmacy = await Pharmacy.findByIdAndDelete(req.params.id);\n    if (!pharmacy) {\n      return res.status(404).json({ error: \"Pharmacy not found\" });\n    }\n    res.status(200).json({ message: \"Pharmacy Deleted\" });\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get pharmacy by username\nconst getPharmacyByUsername = async (req, res) => {\n  try {\n    const pharmacy = await Pharmacy.findOne({ username: req.params.username });\n    if (!pharmacy) {\n      return res.status(404).json({ error: \"Pharmacy not found\" });\n    }\n    res.status(200).json(pharmacy);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get pharmacies by address\nconst getPharmaciesByAddress = async (req, res) => {\n  try {\n    const pharmacies = await Pharmacy.find({ address: req.params.address });\n    res.status(200).json(pharmacies);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\nmodule.exports = {\n  createPharmacy,\n  getAllPharmacies,\n  getPharmacyById,\n  updatePharmacyById,\n  deletePharmacyById,\n  getPharmacyByUsername,\n  getPharmaciesByAddress,\n};\n"],"file":"pharmacy.controller.dev.js"}