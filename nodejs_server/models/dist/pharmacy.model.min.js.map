{"version":3,"sources":["pharmacy.model.js"],"names":["mongoose","require","bcrypt","pharmacySchema","Schema","username","type","String","required","unique","maxlength","trim","password","minlength","default","pre","next","this","isModified","genSalt","salt","hash","console","log","_context","t0","timestamps","model"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,OAASD,QAAQ,UAEjBE,eAAiB,IAAIH,SAASI,OAAO,CAF3CC,SAAY,CAIRC,KAAMC,OAFJJ,UAAAA,EACJE,QAAU,EACRC,UAAMC,EACNC,UAAU,GACVC,MAAM,GAENC,SAAAA,CACAC,KAAMJ,OAPiCC,UAAA,EASzCI,UAAU,GAERJ,QAAAA,CACAK,KAAAA,OAZuCL,UAAA,GAevCF,MAAI,CACJE,KAAAA,OAhBuCA,UAAA,GAmBvCF,KAAI,CACJE,KAAAA,OApBuCM,QAAA,cAsBnCX,eAAAY,IAtBR,OA4BAZ,SAAAa,GAAAb,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GAEEc,KAAAC,WAAA,YAFFf,CAAAA,EAAAA,KAAAA,EAAAA,MAAAA,OAAAA,EAAAA,OAAAA,SAEEa,KAFFb,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAGce,OAAWC,QAAhB,KAHThB,KAAAA,EAAAA,OAEEiB,EAFFjB,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAEED,OAAAmB,KAAAJ,KAAAL,SAAAQ,IAFFjB,KAAAA,EAEEc,KAAAL,SAFFT,EAAAA,KAEEa,IAFFb,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,GAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GAYMmB,QAAQC,IAARC,EAAAC,IAVJT,EAAAQ,EAAAC,IAFFtB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OAEE,CAAAuB,YAAA,IAMUN,OAAAA,QANVpB,SAAA2B,MAAA,WAAAxB","file":"pharmacy.model.min.js","sourcesContent":["const mongoose = require(\"mongoose\");\nconst bcrypt = require(\"bcrypt\");\n\nconst pharmacySchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    minlength: 3,\n    maxlength: 30,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6,\n  },\n  address: {\n    type: String,\n    required: true,\n  },\n  phone: {\n    type: String,\n    required: true,\n  },\n  role: {\n    type: String,\n    default: \"Pharmacy\",\n  },\n});\n\npharmacySchema.pre(\n  \"save\",\n  async function (next) {\n    if (!this.isModified(\"password\")) {\n      return next();\n    }\n\n    try {\n      const salt = await bcrypt.genSalt(10);\n      this.password = await bcrypt.hash(this.password, salt);\n      next();\n    } catch (error) {\n      console.log(error);\n      next(error);\n    }\n  },\n  {\n    timestamps: true,\n  }\n);\n\nmodule.exports = mongoose.model(\"Pharmacy\", pharmacySchema);\n"]}