{"version":3,"sources":["patient.model.js"],"names":["mongoose","require","validator","Schema","username","bcrypt","String","required","patientSchema","type","minlength","maxlength","trim","unique","email","isEmail","validate","address","phone","dateOfBirth","Date","gender","of","Types","Mixed","additionalInfo","Map","pre","next","salt","regeneratorRuntime","async","_context","prev","abrupt","awrap","genSalt","sent","isModified","hash","this","password","t0","console","log","stop","timestamps","module","exports","model"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,UAAYD,QAAQ,aADpBD,OAAWC,QAAQ,UACnBC,cAAYD,IAAQD,SAADG,OAAzB,CAIEC,SAAU,CAHNC,KAAMC,OAKRC,UAAU,EAHRC,QAAAA,EACJJ,UAAU,EACRK,UAAMH,GACNC,MAAAA,GAEAG,SAAAA,CACAC,KAAAA,OACAC,UAAM,EAPgCF,UAAA,GAUtCD,UAAMH,CACNC,KAAAA,OACAG,UAAS,EAZ6BA,UAAA,GAetCD,SAAMH,CACNC,KAAAA,OACAG,UAAS,EAjB6BA,UAAA,GAoBtCD,MAAI,CACJF,KAAAA,OACAG,UAAS,EAtB6BG,QAAA,EAwBxCC,SAAO,CAAAZ,UAAAa,QAAA,iCAELR,QAAAA,CACAM,KAAMP,OACNU,UAAU,GAEZC,MAAO,CACLR,KAAMH,OACNC,UAAU,GAEZW,YAAO,CACLT,KAAMH,KACNC,UAAU,GAEZY,OAAAA,CACEV,KAAMW,OACNb,KAAAA,CAAAA,SAAU,SAEZc,eAAQ,CACNZ,KAAMH,IACNgB,GAAAtB,SAAOG,OAAUoB,MAAXC,OAERC,KAAAA,CACEhB,KAAMiB,OACNJ,QAAItB,aAIJQ,cAAAmB,IAFI,OAlDR,SAAAC,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAJ,MAAA,KAAA,EAAA,GAwDApB,KAAcmB,WAAd,YAxDA,CAAAK,EAAAJ,KAAA,EAAA,MAAA,OAAAI,EAAAE,OAAA,SA0DEN,KA1DF,KAAA,EAAA,OAAAI,EAAAC,KAAA,EAAAD,EAAAJ,KAAA,EAAAE,mBAAAK,MA0DE9B,OAAA+B,QAAA,KA1DF,KAAA,EAAA,OA0DEP,EA1DFG,EAAAK,KAAAL,EAAAJ,KAAA,EAAAE,mBAAAK,MA2DcG,OAAWC,KAAhBC,KADPC,SAAAZ,IA1DF,KAAA,EA0DEW,KAAAC,SA1DFT,EAAAK,KA0DET,IA1DFI,EAAAJ,KAAA,GAAA,MAAA,KAAA,GAAAI,EAAAC,KAAA,GAAAD,EAAAU,GAAAV,EAAA,MAAA,GA0DEW,QAAAC,IAAAZ,EAAAU,IAWId,EAAII,EAAAU,IArEV,KAAA,GAAA,IAAA,MAAA,OAAAV,EAAAa,SAAA,KAAAL,KAAA,CAAA,CAAA,EAAA,OA0DE,CAAAM,YAAA,IAAAC,OAAAC,QAAAhD,SAAAiD,MAAA,UAAAzC","file":"patient.model.min.js","sourcesContent":["const mongoose = require(\"mongoose\");\nconst validator = require(\"validator\");\nconst bcrypt = require(\"bcrypt\");\n\nconst patientSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    minlength: 3,\n    maxlength: 30,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6,\n  },\n  firstName: {\n    type: String,\n    required: true,\n    minlength: 2,\n  },\n  lastName: {\n    type: String,\n    required: true,\n    minlength: 2,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    validate: [validator.isEmail, \"Please provide a valid email\"],\n  },\n  address: {\n    type: String,\n    required: true,\n  },\n  phone: {\n    type: String,\n    required: true,\n  },\n  dateOfBirth: {\n    type: Date,\n    required: true,\n  },\n  gender: {\n    type: String,\n    enum: [\"Female\", \"Male\"],\n  },\n  additionalInfo: {\n    type: Map,\n    of: mongoose.Schema.Types.Mixed,\n  },\n  role: {\n    type: String,\n    default: \"Patient\",\n  },\n});\n\npatientSchema.pre(\n  \"save\",\n  async function (next) {\n    if (!this.isModified(\"password\")) {\n      return next();\n    }\n\n    try {\n      const salt = await bcrypt.genSalt(10);\n      this.password = await bcrypt.hash(this.password, salt);\n      next();\n    } catch (error) {\n      console.log(error);\n      next(error);\n    }\n  },\n  {\n    timestamps: true,\n  }\n);\n\nmodule.exports = mongoose.model(\"Patient\", patientSchema);\n"]}