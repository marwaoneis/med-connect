{"version":3,"sources":["doctor.model.js"],"names":["mongoose","require","validator","bcrypt","doctorSchema","Schema","username","type","String","required","unique","minlength","maxlength","trim","password","firstName","lastName","email","validate","isEmail","address","phone","gender","specialization","yearsOfExperience","Number","appointmentPrice","timing","startTime","endTime","daysOfOperation","role","pre","next","isModified","genSalt","salt","hash","console","log","timestamps","module","exports","model"],"mappings":"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","sourcesContent":["const mongoose = require(\"mongoose\");\nconst validator = require(\"validator\");\nconst bcrypt = require(\"bcrypt\");\n\nconst doctorSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    minlength: 3,\n    maxlength: 30,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6,\n  },\n  firstName: {\n    type: String,\n    required: true,\n    minlength: 2,\n  },\n  lastName: {\n    type: String,\n    required: true,\n    minlength: 2,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    validate: [validator.isEmail, \"Please provide a valid email\"],\n  },\n  address: {\n    type: String,\n    required: true,\n  },\n  phone: {\n    type: String,\n    required: true,\n  },\n  gender: {\n    type: String,\n    enum: [\"Female\", \"Male\"],\n  },\n  specialization: {\n    type: String,\n    required: true,\n  },\n  yearsOfExperience: {\n    type: Number,\n    required: true,\n  },\n  appointmentPrice: {\n    type: Number,\n    required: true,\n  },\n  timing: {\n    startTime: {\n      type: String,\n      required: true,\n    },\n    endTime: {\n      type: String,\n      required: true,\n    },\n    daysOfOperation: {\n      type: String,\n      required: true,\n    },\n  },\n  role: {\n    type: String,\n    default: \"Doctor\",\n  },\n});\n\ndoctorSchema.pre(\n  \"save\",\n  async function (next) {\n    if (!this.isModified(\"password\")) {\n      return next();\n    }\n\n    try {\n      const salt = await bcrypt.genSalt(10);\n      this.password = await bcrypt.hash(this.password, salt);\n      next();\n    } catch (error) {\n      console.log(error);\n      next(error);\n    }\n  },\n  {\n    timestamps: true,\n  }\n);\n\nmodule.exports = mongoose.model(\"Doctor\", doctorSchema);\n"],"file":"doctor.model.dev.js"}