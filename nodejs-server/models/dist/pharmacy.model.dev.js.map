{"version":3,"sources":["pharmacy.model.js"],"names":["mongoose","require","validator","bcrypt","pharmacySchema","Schema","username","type","String","required","unique","minlength","maxlength","trim","password","address","phone","pre","next","genSalt","salt","hash","console","log","timestamps","module","exports","model"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMG,cAAc,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CAAoB;AACzCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,IAFF;AAGRC,IAAAA,MAAM,EAAE,IAHA;AAIRC,IAAAA,SAAS,EAAE,CAJH;AAKRC,IAAAA,SAAS,EAAE,EALH;AAMRC,IAAAA,IAAI,EAAE;AANE,GAD+B;AASzCC,EAAAA,QAAQ,EAAE;AACRP,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,IAFF;AAGRE,IAAAA,SAAS,EAAE;AAHH,GAT+B;AAczCI,EAAAA,OAAO,EAAE;AACPR,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GAdgC;AAkBzCO,EAAAA,KAAK,EAAE;AACLT,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE;AAFL;AAlBkC,CAApB,CAAvB;AAwBAL,cAAc,CAACa,GAAf,CACE,MADF,EAEE,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEuBf,MAAM,CAACgB,OAAP,CAAe,EAAf,CAFvB;;AAAA;AAEUC,UAAAA,IAFV;AAAA;AAAA,0CAG0BjB,MAAM,CAACkB,IAAP,CAAY,KAAKP,QAAjB,EAA2BM,IAA3B,CAH1B;;AAAA;AAGI,eAAKN,QAHT;AAIII,UAAAA,IAAI;AAJR;AAAA;;AAAA;AAAA;AAAA;AAMII,UAAAA,OAAO,CAACC,GAAR;AACAL,UAAAA,IAAI,aAAJ;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFF,EAYE;AACEM,EAAAA,UAAU,EAAE;AADd,CAZF;AAiBAC,MAAM,CAACC,OAAP,GAAiB1B,QAAQ,CAAC2B,KAAT,CAAe,UAAf,EAA2BvB,cAA3B,CAAjB","sourcesContent":["const mongoose = require(\"mongoose\");\nconst validator = require(\"validator\");\nconst bcrypt = require(\"bcrypt\");\n\nconst pharmacySchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    minlength: 3,\n    maxlength: 30,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6,\n  },\n  address: {\n    type: String,\n    required: true,\n  },\n  phone: {\n    type: String,\n    required: true,\n  },\n});\n\npharmacySchema.pre(\n  \"save\",\n  async function (next) {\n    try {\n      const salt = await bcrypt.genSalt(10);\n      this.password = await bcrypt.hash(this.password, salt);\n      next();\n    } catch (error) {\n      console.log(error);\n      next(error);\n    }\n  },\n  {\n    timestamps: true,\n  }\n);\n\nmodule.exports = mongoose.model(\"Pharmacy\", pharmacySchema);\n"],"file":"pharmacy.model.dev.js"}