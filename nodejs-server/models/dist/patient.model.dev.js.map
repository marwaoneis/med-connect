{"version":3,"sources":["patient.model.js"],"names":["mongoose","require","validator","bcrypt","patientSchema","Schema","username","type","String","required","unique","minlength","maxlength","trim","password","firstName","lastName","email","validate","isEmail","address","phone","dateOfBirth","Date","gender","additionalInfo","Map","of","pre","next","genSalt","salt","hash","console","log","timestamps","module","exports","model"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AAEA,IAAMG,aAAa,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CAAoB;AACxCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,IAFF;AAGRC,IAAAA,MAAM,EAAE,IAHA;AAIRC,IAAAA,SAAS,EAAE,CAJH;AAKRC,IAAAA,SAAS,EAAE,EALH;AAMRC,IAAAA,IAAI,EAAE;AANE,GAD8B;AASxCC,EAAAA,QAAQ,EAAE;AACRP,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,IAFF;AAGRE,IAAAA,SAAS,EAAE;AAHH,GAT8B;AAcxCI,EAAAA,SAAS,EAAE;AACTR,IAAAA,IAAI,EAAEC,MADG;AAETC,IAAAA,QAAQ,EAAE,IAFD;AAGTE,IAAAA,SAAS,EAAE;AAHF,GAd6B;AAmBxCK,EAAAA,QAAQ,EAAE;AACRT,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,IAFF;AAGRE,IAAAA,SAAS,EAAE;AAHH,GAnB8B;AAwBxCM,EAAAA,KAAK,EAAE;AACLV,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,MAAM,EAAE,IAHH;AAILQ,IAAAA,QAAQ,EAAE,CAAChB,SAAS,CAACiB,OAAX,EAAoB,8BAApB;AAJL,GAxBiC;AA8BxCC,EAAAA,OAAO,EAAE;AACPb,IAAAA,IAAI,EAAEC,MADC;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GA9B+B;AAkCxCY,EAAAA,KAAK,EAAE;AACLd,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAlCiC;AAsCxCa,EAAAA,WAAW,EAAE;AACXf,IAAAA,IAAI,EAAEgB,IADK;AAEXd,IAAAA,QAAQ,EAAE;AAFC,GAtC2B;AA0CxCe,EAAAA,MAAM,EAAE;AACNjB,IAAAA,IAAI,EAAEC,MADA;AAEN,YAAM,CAAC,QAAD,EAAW,MAAX;AAFA,GA1CgC;AA8CxCiB,EAAAA,cAAc,EAAE;AACdlB,IAAAA,IAAI,EAAEmB,GADQ;AAEdC,IAAAA,EAAE,EAAEnB,MAFU,CAEF;;AAFE;AA9CwB,CAApB,CAAtB;AAoDAJ,aAAa,CAACwB,GAAd,CACE,MADF,EAEE,iBAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEuB1B,MAAM,CAAC2B,OAAP,CAAe,EAAf,CAFvB;;AAAA;AAEUC,UAAAA,IAFV;AAAA;AAAA,0CAG0B5B,MAAM,CAAC6B,IAAP,CAAY,KAAKlB,QAAjB,EAA2BiB,IAA3B,CAH1B;;AAAA;AAGI,eAAKjB,QAHT;AAIIe,UAAAA,IAAI;AAJR;AAAA;;AAAA;AAAA;AAAA;AAMII,UAAAA,OAAO,CAACC,GAAR;AACAL,UAAAA,IAAI,aAAJ;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFF,EAYE;AACEM,EAAAA,UAAU,EAAE;AADd,CAZF;AAiBAC,MAAM,CAACC,OAAP,GAAiBrC,QAAQ,CAACsC,KAAT,CAAe,SAAf,EAA0BlC,aAA1B,CAAjB","sourcesContent":["const mongoose = require(\"mongoose\");\nconst validator = require(\"validator\");\nconst bcrypt = require(\"bcrypt\");\n\nconst patientSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    minlength: 3,\n    maxlength: 30,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6,\n  },\n  firstName: {\n    type: String,\n    required: true,\n    minlength: 2,\n  },\n  lastName: {\n    type: String,\n    required: true,\n    minlength: 2,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    validate: [validator.isEmail, \"Please provide a valid email\"],\n  },\n  address: {\n    type: String,\n    required: true,\n  },\n  phone: {\n    type: String,\n    required: true,\n  },\n  dateOfBirth: {\n    type: Date,\n    required: true,\n  },\n  gender: {\n    type: String,\n    enum: [\"Female\", \"Male\"],\n  },\n  additionalInfo: {\n    type: Map,\n    of: String, // or mongoose.Schema.Types.Mixed if the structure is not consistent\n  },\n});\n\npatientSchema.pre(\n  \"save\",\n  async function (next) {\n    try {\n      const salt = await bcrypt.genSalt(10);\n      this.password = await bcrypt.hash(this.password, salt);\n      next();\n    } catch (error) {\n      console.log(error);\n      next(error);\n    }\n  },\n  {\n    timestamps: true,\n  }\n);\n\nmodule.exports = mongoose.model(\"Patient\", patientSchema);\n"],"file":"patient.model.dev.js"}