{"version":3,"sources":["doctor.model.js"],"names":["mongoose","require","validator","Schema","username","bcrypt","String","required","doctorSchema","type","minlength","maxlength","trim","unique","email","isEmail","validate","address","phone","gender","specialization","yearsOfExperience","Number","appointmentPrice","startTime","endTime","pre","next","salt","regeneratorRuntime","async","_context","prev","awrap","genSalt","sent","hash","this","password","t0","console","log","stop","timestamps","module","exports","model"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,UAAYD,QAAQ,aADpBD,OAAWC,QAAQ,UACnBC,aAAYD,IAAQD,SAAAG,OAA1B,CAIEC,SAAU,CAHNC,KAAMC,OAKRC,UAAU,EAHRC,QAAAA,EACJJ,UAAU,EACRK,UAAMH,GACNC,MAAAA,GAEAG,SAAAA,CACAC,KAAAA,OACAC,UAAM,EAP+BF,UAAA,GAUrCD,UAAMH,CACNC,KAAAA,OACAG,UAAS,EAZ4BA,UAAA,GAerCD,SAAMH,CACNC,KAAAA,OACAG,UAAS,EAjB4BA,UAAA,GAoBrCD,MAAI,CACJF,KAAAA,OACAG,UAAS,EAtB4BG,QAAA,EAwBvCC,SAAO,CAAAZ,UAAAa,QAAA,iCAELR,QAAAA,CACAM,KAAMP,OACNU,UAAU,GAEZC,MAAO,CACLR,KAAMH,OACNC,UAAU,GAEZW,OAAO,CACLT,KAAMH,OACNC,KAAAA,CAAAA,SAAU,SAEZY,eAAQ,CACNV,KAAMH,OACNC,UAAO,GAETa,kBAAgB,CACdX,KAAMH,OACNC,UAAU,GAEZc,iBAAiB,CACfZ,KAAMa,OACNf,UAAU,GAEZgB,OAAAA,CACEd,UAAMa,CACNf,KAAQD,OApD6BC,UAAA,GAuDrCiB,QAAS,CACPf,KAAMH,OACNC,UAAU,GAEZkB,gBAAS,CACPhB,KAAMH,OACNC,UAAU,MAEKC,aAAAkB,IATX,OAtDV,SAAAC,GAAA,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAJ,MAAA,KAAA,EAAA,OAAAI,EAAAC,KAAA,EAAAD,EAAAJ,KAAA,EAAAE,mBAAAI,MAwEE5B,OAAA6B,QAAA,KAxEF,KAAA,EAAA,OAwEEN,EAxEFG,EAAAI,KAAAJ,EAAAJ,KAAA,EAAAE,mBAAAI,MAwEE5B,OAAA+B,KAAAC,KAAAC,SAAAV,IAxEF,KAAA,EAwEES,KAAAC,SAxEFP,EAAAI,KAwEER,IAxEFI,EAAAJ,KAAA,GAAA,MAAA,KAAA,GAAAI,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,MAAA,GAwEES,QAAAC,IAAAV,EAAAQ,IAAAZ,EAAAI,EAAAQ,IAxEF,KAAA,GAAA,IAAA,MAAA,OAAAR,EAAAW,SAAA,KAAAL,KAAA,CAAA,CAAA,EAAA,OAkFE,CAVAM,YAAA,IAeFC,OAAOC,QAAU7C,SAAS8C,MAAM,SAAUtC","file":"doctor.model.min.js","sourcesContent":["const mongoose = require(\"mongoose\");\nconst validator = require(\"validator\");\nconst bcrypt = require(\"bcrypt\");\n\nconst doctorSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true,\n    minlength: 3,\n    maxlength: 30,\n    trim: true,\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 6,\n  },\n  firstName: {\n    type: String,\n    required: true,\n    minlength: 2,\n  },\n  lastName: {\n    type: String,\n    required: true,\n    minlength: 2,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    validate: [validator.isEmail, \"Please provide a valid email\"],\n  },\n  address: {\n    type: String,\n    required: true,\n  },\n  phone: {\n    type: String,\n    required: true,\n  },\n  gender: {\n    type: String,\n    enum: [\"Female\", \"Male\"],\n  },\n  specialization: {\n    type: String,\n    required: true,\n  },\n  yearsOfExperience: {\n    type: Number,\n    required: true,\n  },\n  appointmentPrice: {\n    type: Number,\n    required: true,\n  },\n  timing: {\n    startTime: {\n      type: String,\n      required: true,\n    },\n    endTime: {\n      type: String,\n      required: true,\n    },\n    daysOfOperation: {\n      type: String,\n      required: true,\n    },\n  },\n});\n\ndoctorSchema.pre(\n  \"save\",\n  async function (next) {\n    try {\n      const salt = await bcrypt.genSalt(10);\n      this.password = await bcrypt.hash(this.password, salt);\n      next();\n    } catch (error) {\n      console.log(error);\n      next(error);\n    }\n  },\n  {\n    timestamps: true,\n  }\n);\n\nmodule.exports = mongoose.model(\"Doctor\", doctorSchema);\n"]}