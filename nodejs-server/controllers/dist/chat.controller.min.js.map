{"version":3,"sources":["chat.controller.js"],"names":["Chat","require","createChat","req","res","chat","regeneratorRuntime","async","_context","prev","next","awrap","save","status","json","t0","error","message","stop","getChatById","_context2","findById","params","id","sent","abrupt","updateChatById","_context3","findByIdAndUpdate","body","new","deleteChatById","_context4","findByIdAndDelete","getChatByPatientAndDoctor","_context5","findOne","patientId","doctorId","getChatsByPatientId","chats","_context6","find","getChatsByDoctorId","_context7","module","exports"],"mappings":"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","file":"chat.controller.min.js","sourcesContent":["const Chat = require(\"./../models/chat.model\");\n\n// Create a new chat\nconst createChat = async (req, res) => {\n  try {\n    const chat = new Chat(req.body);\n    await chat.save();\n    res.status(201).json(chat);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\n// Get a single chat by ID\nconst getChatById = async (req, res) => {\n  try {\n    const chat = await Chat.findById(req.params.id);\n    if (!chat) {\n      return res.status(404).json({ error: \"Chat not found\" });\n    }\n    res.status(200).json(chat);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a chat by ID\nconst updateChatById = async (req, res) => {\n  try {\n    const chat = await Chat.findByIdAndUpdate(req.params.id, req.body, {\n      new: true,\n    });\n    if (!chat) {\n      return res.status(404).json({ error: \"Chat not found\" });\n    }\n    res.status(200).json(chat);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete a chat by ID\nconst deleteChatById = async (req, res) => {\n  try {\n    const chat = await Chat.findByIdAndDelete(req.params.id);\n    if (!chat) {\n      return res.status(404).json({ error: \"Chat not found\" });\n    }\n    res.status(204).json({ message: \"Chat deleted!\" });\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get chat by patientId and doctorId\nconst getChatByPatientAndDoctor = async (req, res) => {\n  try {\n    const chat = await Chat.findOne({\n      patientId: req.params.patientId,\n      doctorId: req.params.doctorId,\n    });\n    if (!chat) {\n      return res.status(404).json({ error: \"Chat not found\" });\n    }\n    res.status(200).json(chat);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get chats by patientId\nconst getChatsByPatientId = async (req, res) => {\n  try {\n    const chats = await Chat.find({ patientId: req.params.patientId });\n    res.status(200).json(chats);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get chats by doctorId\nconst getChatsByDoctorId = async (req, res) => {\n  try {\n    const chats = await Chat.find({ doctorId: req.params.doctorId });\n    res.status(200).json(chats);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\nmodule.exports = {\n  createChat,\n  getChatById,\n  updateChatById,\n  deleteChatById,\n  getChatByPatientAndDoctor,\n  getChatsByPatientId,\n  getChatsByDoctorId,\n};\n"]}