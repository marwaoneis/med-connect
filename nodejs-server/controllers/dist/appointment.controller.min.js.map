{"version":3,"sources":["appointment.controller.js"],"names":["Appointment","require","createAppointment","req","res","appointment","regeneratorRuntime","async","_context","prev","next","awrap","save","status","json","t0","error","message","stop","getAppointmentById","_context2","findById","params","id","sent","abrupt","getAppointmentsByPatientId","appointments","_context3","find","patientId","getAppointmentsByDoctorId","_context4","doctorId","updateAppointmentById","_context5","findByIdAndUpdate","body","_context6","findByIdAndDelete","module","deleteAppointmentById"],"mappings":"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","file":"appointment.controller.min.js","sourcesContent":["const Appointment = require(\"./../models/appointment.model\");\n\n// Create a new appointment\nconst createAppointment = async (req, res) => {\n  try {\n    const appointment = new Appointment(req.body);\n    await appointment.save();\n    res.status(201).json(appointment);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\n// Get a single appointment by ID\nconst getAppointmentById = async (req, res) => {\n  try {\n    const appointment = await Appointment.findById(req.params.id);\n    if (!appointment) {\n      return res.status(404).json({ error: \"Appointment not found\" });\n    }\n    res.status(200).json(appointment);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get all appointments by patientId\nconst getAppointmentsByPatientId = async (req, res) => {\n  try {\n    const appointments = await Appointment.find({\n      patientId: req.params.patientId,\n    });\n    res.status(200).json(appointments);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get all appointments by doctorId\nconst getAppointmentsByDoctorId = async (req, res) => {\n  try {\n    const appointments = await Appointment.find({\n      doctorId: req.params.doctorId,\n    });\n    res.status(200).json(appointments);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update an appointment by ID\nconst updateAppointmentById = async (req, res) => {\n  try {\n    const appointment = await Appointment.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      { new: true }\n    );\n    if (!appointment) {\n      return res.status(404).json({ error: \"Appointment not found\" });\n    }\n    res.status(200).json(appointment);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete an appointment by ID\nconst deleteAppointmentById = async (req, res) => {\n  try {\n    const appointment = await Appointment.findByIdAndDelete(req.params.id);\n    if (!appointment) {\n      return res.status(404).json({ error: \"Appointment not found\" });\n    }\n    res.status(204).json({ message: \"Pharmacy Deleted\" });\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\nmodule.exports = {\n  createAppointment,\n  getAppointmentsByPatientId,\n  getAppointmentsByDoctorId,\n  getAppointmentById,\n  updateAppointmentById,\n  deleteAppointmentById,\n};\n"]}