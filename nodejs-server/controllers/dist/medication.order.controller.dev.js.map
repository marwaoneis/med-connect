{"version":3,"sources":["medication.order.controller.js"],"names":["MedicationOrder","require","createMedicationOrder","req","res","medicationOrder","body","save","status","json","error","message","getMedicationOrdersByPatientId","find","patientId","params","medicationOrders","getMedicationOrdersByPharmacyId","pharmacyId","getMedicationOrderById","findById","id","updateMedicationOrderById","findByIdAndUpdate","deleteMedicationOrderById","findByIdAndDelete","module","exports"],"mappings":"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","sourcesContent":["const MedicationOrder = require(\"../models/medication.order.model\");\n\n// Create a new medication order\nconst createMedicationOrder = async (req, res) => {\n  try {\n    const medicationOrder = new MedicationOrder(req.body);\n    await medicationOrder.save();\n    res.status(201).json(medicationOrder);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\n// Get all medication orders by patientId\nconst getMedicationOrdersByPatientId = async (req, res) => {\n  try {\n    const medicationOrders = await MedicationOrder.find({\n      patientId: req.params.patientId,\n    });\n    res.status(200).json(medicationOrders);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get all medication orders by pharmacyId\nconst getMedicationOrdersByPharmacyId = async (req, res) => {\n  try {\n    const medicationOrders = await MedicationOrder.find({\n      pharmacyId: req.params.pharmacyId,\n    });\n    res.status(200).json(medicationOrders);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get a single medication order by ID\nconst getMedicationOrderById = async (req, res) => {\n  try {\n    const medicationOrder = await MedicationOrder.findById(req.params.id);\n    if (!medicationOrder) {\n      return res.status(404).json({ error: \"Medication Order not found\" });\n    }\n    res.status(200).json(medicationOrder);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a medication order by ID\nconst updateMedicationOrderById = async (req, res) => {\n  try {\n    const medicationOrder = await MedicationOrder.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      { new: true }\n    );\n    if (!medicationOrder) {\n      return res.status(404).json({ error: \"Medication Order not found\" });\n    }\n    res.status(200).json(medicationOrder);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete a medication order by ID\nconst deleteMedicationOrderById = async (req, res) => {\n  try {\n    const medicationOrder = await MedicationOrder.findByIdAndDelete(\n      req.params.id\n    );\n    if (!medicationOrder) {\n      return res.status(404).json({ error: \"Medication Order not found\" });\n    }\n    res.status(204).json({ message: \"Order Deleted\" });\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\nmodule.exports = {\n  createMedicationOrder,\n  getMedicationOrdersByPatientId,\n  getMedicationOrdersByPharmacyId,\n  getMedicationOrderById,\n  updateMedicationOrderById,\n  deleteMedicationOrderById,\n};\n"],"file":"medication.order.controller.dev.js"}