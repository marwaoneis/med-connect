{"version":3,"sources":["patient.controller.js"],"names":["Patient","require","getAllPatients","req","res","find","patients","status","json","error","getPatient","params","id","findById","patient","createPatient","body","username","password","firstName","lastName","email","address","phone","dateOfBirth","gender","save","updatePatient","findByIdAndUpdate","deletePatient","findByIdAndRemove","end","insertAdditionalInfo","key","value","$set","deleteAdditionalInfo","$unset","module","exports"],"mappings":"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","sourcesContent":["const Patient = require(\"../models/patient.model\");\n\n// Get all patients\nconst getAllPatients = async (req, res) => {\n  try {\n    const patients = await Patient.find();\n    res.status(200).json(patients);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get a specific patient by ID\nconst getPatient = async (req, res) => {\n  try {\n    if (!req.params.id) {\n      res\n        .status(400)\n        .json({ error: \"Bad Request, PatientId Id should be provided\" });\n    }\n    const patient = await Patient.findById(req.params.id);\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Create a new patient\nconst createPatient = async (req, res) => {\n  try {\n    // Validate required parameters\n    const {\n      username,\n      password,\n      firstName,\n      lastName,\n      email,\n      address,\n      phone,\n      dateOfBirth,\n      gender,\n    } = req.body;\n    if (\n      !username ||\n      !password ||\n      !firstName ||\n      !lastName ||\n      !email ||\n      !address ||\n      !phone ||\n      !dateOfBirth ||\n      !gender\n    ) {\n      return res\n        .status(400)\n        .json({ error: \"All required parameters must be provided\" });\n    }\n\n    const patient = new Patient(req.body);\n    await patient.save();\n    res.status(201).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a patient by ID\nconst updatePatient = async (req, res) => {\n  try {\n    const {\n      username,\n      password,\n      firstName,\n      lastName,\n      email,\n      address,\n      phone,\n      dateOfBirth,\n      gender,\n    } = req.body;\n\n    // Check if at least one field is present for update\n    if (\n      !username &&\n      !password &&\n      !firstName &&\n      !lastName &&\n      !email &&\n      !address &&\n      !phone &&\n      !dateOfBirth &&\n      !gender\n    ) {\n      return res\n        .status(400)\n        .json({ error: \"At least one field must be provided for update\" });\n    }\n\n    const patient = await Patient.findByIdAndUpdate(req.params.id, req.body, {\n      new: true,\n    });\n\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete a patient by ID\nconst deletePatient = async (req, res) => {\n  try {\n    const patient = await Patient.findByIdAndRemove(req.params.id);\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n    res.status(204).end(); // No content\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Insert entry to additional info in a patient by ID\nconst insertAdditionalInfo = async (req, res) => {\n  try {\n    const { key, value } = req.body;\n\n    // Check if key and value are present for insertion\n    if (!key || !value) {\n      return res\n        .status(400)\n        .json({ error: \"Both key and value must be provided for insertion\" });\n    }\n\n    const patient = await Patient.findByIdAndUpdate(\n      req.params.id,\n      { $set: { [`additionalInfo.${key}`]: value } }, // Use $set to insert the key-value pair\n      { new: true }\n    );\n\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete entry from additional info in a patient by ID\nconst deleteAdditionalInfo = async (req, res) => {\n  try {\n    const { key } = req.params;\n\n    // Check if key is present for deletion\n    if (!key) {\n      return res\n        .status(400)\n        .json({ error: \"Key must be provided for deletion\" });\n    }\n\n    const patient = await Patient.findByIdAndUpdate(\n      req.params.id,\n      { $unset: { [`additionalInfo.${key}`]: 1 } }, // Use $unset to delete the key-value pair\n      { new: true }\n    );\n\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\nmodule.exports = {\n  getAllPatients,\n  getPatient,\n  createPatient,\n  updatePatient,\n  deletePatient,\n  insertAdditionalInfo,\n  deleteAdditionalInfo,\n};\n"],"file":"patient.controller.dev.js"}