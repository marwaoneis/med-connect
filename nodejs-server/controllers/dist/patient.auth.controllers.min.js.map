{"version":3,"sources":["patient.auth.controllers.js"],"names":["require","generateToken","sendResponseWithToken","bcrypt","exports","registerPatient","req","res","patient","regeneratorRuntime","async","_context","prev","next","Patient","body","awrap","save","t0","status","json","error","message","stop","_req$body","username","password","_context2","console","log","findOne","sent","abrupt","compare"],"mappings":"0BAAiDA,QAAQ,uBAAjDC,uBAAAA,cAAeC,+BAAAA,sBACjBC,OAASH,QAAQ,UADfC,QAAAA,QAGgB,2BAExBG,QAAQC,gBAAkB,SAAOC,EAAKC,GAAZ,IAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAFpBE,EAAUd,IAAQc,QAAAR,EAAAS,MAEEJ,EAAAE,KAAA,EAAAJ,mBAAAO,MAIhBR,EAAQS,QAJQ,KAAA,EAAAf,sBAAAM,EAAA,IAAAD,GAAAI,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,MAAA,GAAAJ,EAAAY,OAAA,KAAAC,KAAA,CAAAC,MAAAV,EAAAO,GAAAI,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAY,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAGhBf,QAAAA,aAAU,SAAIM,EAAWP,GAAf,IAAAiB,EAAAC,EAAAC,EAAAlB,EAAA,OAAAC,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAHMe,QAAAC,IAAA,sCAGNF,EAAAf,KAAA,EAAAY,EAHMlB,EAAAS,KAAAU,EAGND,EAHMC,SAAAC,EAGNF,EAHME,SAGNC,EAAAd,KAAA,EAAAJ,mBAAAO,MAHMF,QAAAgB,QAAA,CAAAL,SAAAA,KAGN,KAAA,EAAA,GAHMjB,EAGNmB,EAAAI,KAAA,CAAAJ,EAAAd,KAAA,EAAA,MAAA,OAAAc,EAAAK,OAAA,SAmBPzB,EAAIY,OAAO,KAAKC,KAAK,CAAEC,MAAO,+BAnBvB,KAAA,EAAA,OAAAM,EAAAd,KAAA,GAAAJ,mBAAAO,MAMAI,OAAKa,QAAAP,EAAAlB,EAAAkB,WANL,KAAA,GAAA,GAAAC,EAAAI,KAAA,CAAAJ,EAAAd,KAAA,GAAA,MAAA,OAAAc,EAAAK,OAAA,SAMhBzB,EAAAY,OAAA,KAAAC,KAAA,CAAAC,MAAA,+BANgB,KAAA,GAHMnB,sBAAAM,EAAA,IAAAD,GAGNoB,EAAAd,KAAA,GAAA,MAAA,KAAA,GAAAc,EAAAf,KAAA,GAAAe,EAAAT,GAAAS,EAAA,MAAA,GAHMpB,EAAAY,OAAA,KAAAC,KAAA,CAAAC,MAAAM,EAAAT,GAAAI,UAGN,KAAA,GAAA,IAAA,MAAA,OAAAK,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"patient.auth.controllers.min.js","sourcesContent":["const { generateToken, sendResponseWithToken } = require(\"../utils/auth.utils\");\nconst bcrypt = require(\"bcrypt\");\n\nconst Patient = require(\"../models/patient.model\");\n\nexports.registerPatient = async (req, res) => {\n  try {\n    // Create new patient\n    const patient = new Patient(req.body);\n    await patient.save();\n\n    // Send response with token\n    sendResponseWithToken(patient, 201, res);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\nexports.loginPatient = async (req, res) => {\n  console.log(\"Received login request for patient\");\n\n  try {\n    const { username, password } = req.body;\n\n    // Check if patient exists\n    const patient = await Patient.findOne({ username });\n    if (!patient) {\n      return res.status(401).json({ error: \"Invalid login credentials\" });\n    }\n\n    // Check if password matches\n    const isMatch = await bcrypt.compare(password, patient.password);\n    if (!isMatch) {\n      return res.status(401).json({ error: \"Invalid login credentials\" });\n    }\n\n    // Send response with token\n    sendResponseWithToken(patient, 200, res);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n"]}