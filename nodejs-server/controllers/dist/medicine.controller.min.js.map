{"version":3,"sources":["medicine.controller.js"],"names":["Medicine","require","createMedicine","req","res","medicine","regeneratorRuntime","async","_context","prev","next","awrap","save","status","json","t0","error","message","stop","getMedicinesByPharmacyId","medicines","_context2","find","params","sent","getMedicineById","_context3","console","log","id","findById","abrupt","updateMedicineById","_context4","findByIdAndUpdate","body","pharmacyId","findByIdAndDelete","module","exports","deleteMedicineById"],"mappings":"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","file":"medicine.controller.min.js","sourcesContent":["const Medicine = require(\"../models/medicine.model\");\n\n// Create a new medicine\nconst createMedicine = async (req, res) => {\n  try {\n    const medicine = new Medicine(req.body);\n    await medicine.save();\n    res.status(201).json(medicine);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\n// Get all medicines by pharmacyId\nconst getMedicinesByPharmacyId = async (req, res) => {\n  try {\n    const medicines = await Medicine.find({\n      pharmacyId: req.params.pharmacyId,\n    });\n    res.status(200).json(medicines);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get a single medicine by ID\nconst getMedicineById = async (req, res) => {\n  try {\n    console.log(\"Attempting to fetch medicine ID:\", req.params.id); // This should be your first console.log\n    const medicine = await Medicine.findById(req.params.id);\n    if (!medicine) {\n      console.log(\"Medicine not found for ID:\", req.params.id);\n      return res.status(404).json({ error: \"Medicine not found\" });\n    }\n    console.log(\"Medicine found:\", medicine);\n    res.status(200).json(medicine);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a medicine by ID\nconst updateMedicineById = async (req, res) => {\n  try {\n    const medicine = await Medicine.findByIdAndUpdate(req.params.id, req.body, {\n      new: true,\n    });\n    if (!medicine) {\n      return res.status(404).json({ error: \"Medicine not found\" });\n    }\n    res.status(200).json(medicine);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete a medicine by ID\nconst deleteMedicineById = async (req, res) => {\n  try {\n    const medicine = await Medicine.findByIdAndDelete(req.params.id);\n    if (!medicine) {\n      return res.status(404).json({ error: \"Medicine not found\" });\n    }\n    res.status(204).json({ message: \"Medicine deleted\" });\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\nmodule.exports = {\n  createMedicine,\n  getMedicineById,\n  updateMedicineById,\n  deleteMedicineById,\n  getMedicinesByPharmacyId,\n};\n"]}