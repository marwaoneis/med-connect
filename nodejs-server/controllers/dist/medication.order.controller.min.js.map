{"version":3,"sources":["medication.order.controller.js"],"names":["MedicationOrder","require","createMedicationOrder","req","res","medicationOrder","regeneratorRuntime","async","_context","prev","next","awrap","save","status","json","t0","error","message","stop","getMedicationOrdersByPatientId","medicationOrders","_context2","find","params","sent","getMedicationOrdersByPharmacyId","_context3","pharmacyId","getMedicationOrderById","_context4","findById","id","abrupt","patientId","findByIdAndUpdate","body","new","deleteMedicationOrderById","_context6","findByIdAndDelete","module","exports","updateMedicationOrderById"],"mappings":"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","file":"medication.order.controller.min.js","sourcesContent":["const MedicationOrder = require(\"../models/medication.order.model\");\n\n// Create a new medication order\nconst createMedicationOrder = async (req, res) => {\n  try {\n    const medicationOrder = new MedicationOrder(req.body);\n    await medicationOrder.save();\n    res.status(201).json(medicationOrder);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\n// Get all medication orders by patientId\nconst getMedicationOrdersByPatientId = async (req, res) => {\n  try {\n    const medicationOrders = await MedicationOrder.find({\n      patientId: req.params.patientId,\n    });\n    res.status(200).json(medicationOrders);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get all medication orders by pharmacyId\nconst getMedicationOrdersByPharmacyId = async (req, res) => {\n  try {\n    const medicationOrders = await MedicationOrder.find({\n      pharmacyId: req.params.pharmacyId,\n    });\n    res.status(200).json(medicationOrders);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get a single medication order by ID\nconst getMedicationOrderById = async (req, res) => {\n  try {\n    const medicationOrder = await MedicationOrder.findById(req.params.id);\n    if (!medicationOrder) {\n      return res.status(404).json({ error: \"Medication Order not found\" });\n    }\n    res.status(200).json(medicationOrder);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a medication order by ID\nconst updateMedicationOrderById = async (req, res) => {\n  try {\n    const medicationOrder = await MedicationOrder.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      { new: true }\n    );\n    if (!medicationOrder) {\n      return res.status(404).json({ error: \"Medication Order not found\" });\n    }\n    res.status(200).json(medicationOrder);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete a medication order by ID\nconst deleteMedicationOrderById = async (req, res) => {\n  try {\n    const medicationOrder = await MedicationOrder.findByIdAndDelete(\n      req.params.id\n    );\n    if (!medicationOrder) {\n      return res.status(404).json({ error: \"Medication Order not found\" });\n    }\n    res.status(204).json({ message: \"Order Deleted\" });\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\nmodule.exports = {\n  createMedicationOrder,\n  getMedicationOrdersByPatientId,\n  getMedicationOrdersByPharmacyId,\n  getMedicationOrderById,\n  updateMedicationOrderById,\n  deleteMedicationOrderById,\n};\n"]}