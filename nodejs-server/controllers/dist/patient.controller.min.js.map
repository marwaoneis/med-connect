{"version":3,"sources":["patient.controller.js"],"names":["Patient","require","exports","req","res","patients","regeneratorRuntime","async","_context","prev","next","awrap","find","getAllPatients","sent","json","t0","status","message","stop","getPatient","patient","_context2","findById","params","id","abrupt","createPatient","newPatient","_context3","body","updatePatient","updatedPatient","_context4","findByIdAndUpdate","new","deletePatient","_context5"],"mappings":"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","file":"patient.controller.min.js","sourcesContent":["const Patient = require(\"../models/patient.model\");\n\nexports.getAllPatients = async (req, res) => {\n  try {\n    const patients = await Patient.find();\n    res.json(patients);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\nexports.getPatient = async (req, res) => {\n  try {\n    const patient = await Patient.findById(req.params.id);\n    if (!patient) return res.status(404).json({ message: \"Patient not found\" });\n    res.json(patient);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\nexports.createPatient = async (req, res) => {\n  const patient = new Patient(req.body);\n  try {\n    const newPatient = await patient.save();\n    res.status(201).json(newPatient);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n};\n\nexports.updatePatient = async (req, res) => {\n  try {\n    const updatedPatient = await Patient.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      { new: true }\n    );\n    res.json(updatedPatient);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n};\n\nexports.deletePatient = async (req, res) => {\n  try {\n    const patient = await Patient.findById(req.params.id);\n    if (!patient) return res.status(404).json({ message: \"Patient not found\" });\n    await patient.remove();\n    res.json({ message: \"Deleted Patient\" });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n"]}