{"version":3,"sources":["patient.controller.js"],"names":["Patient","require","getAllPatients","req","res","patients","regeneratorRuntime","async","_context","prev","next","awrap","find","sent","status","json","t0","error","stop","getPatient","patient","_context2","params","id","findById","abrupt","createPatient","_req$body","username","password","firstName","lastName","email","address","phone","dateOfBirth","gender","_context3","body","save","updatePatient","_req$body2","_context4","findByIdAndUpdate","new","deletePatient","_context5","findByIdAndRemove","end","insertAdditionalInfo","_req$body3","key","value","_context6","$set","_defineProperty","concat","deleteAdditionalInfo","_context7","$unset","module","exports"],"mappings":"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","file":"patient.controller.min.js","sourcesContent":["const Patient = require(\"../models/patient.model\");\n\n// Get all patients\nconst getAllPatients = async (req, res) => {\n  try {\n    const patients = await Patient.find();\n    res.status(200).json(patients);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get a specific patient by ID\nconst getPatient = async (req, res) => {\n  try {\n    if (!req.params.id) {\n      res\n        .status(400)\n        .json({ error: \"Bad Request, PatientId Id should be provided\" });\n    }\n    const patient = await Patient.findById(req.params.id);\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Create a new patient\nconst createPatient = async (req, res) => {\n  try {\n    // Validate required parameters\n    const {\n      username,\n      password,\n      firstName,\n      lastName,\n      email,\n      address,\n      phone,\n      dateOfBirth,\n      gender,\n    } = req.body;\n    if (\n      !username ||\n      !password ||\n      !firstName ||\n      !lastName ||\n      !email ||\n      !address ||\n      !phone ||\n      !dateOfBirth ||\n      !gender\n    ) {\n      return res\n        .status(400)\n        .json({ error: \"All required parameters must be provided\" });\n    }\n\n    const patient = new Patient(req.body);\n    await patient.save();\n    res.status(201).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a patient by ID\nconst updatePatient = async (req, res) => {\n  try {\n    const {\n      username,\n      password,\n      firstName,\n      lastName,\n      email,\n      address,\n      phone,\n      dateOfBirth,\n      gender,\n    } = req.body;\n\n    // Check if at least one field is present for update\n    if (\n      !username &&\n      !password &&\n      !firstName &&\n      !lastName &&\n      !email &&\n      !address &&\n      !phone &&\n      !dateOfBirth &&\n      !gender\n    ) {\n      return res\n        .status(400)\n        .json({ error: \"At least one field must be provided for update\" });\n    }\n\n    const patient = await Patient.findByIdAndUpdate(req.params.id, req.body, {\n      new: true,\n    });\n\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete a patient by ID\nconst deletePatient = async (req, res) => {\n  try {\n    const patient = await Patient.findByIdAndRemove(req.params.id);\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n    res.status(204).end(); // No content\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Insert entry to additional info in a patient by ID\nconst insertAdditionalInfo = async (req, res) => {\n  try {\n    const { key, value } = req.body;\n\n    // Check if key and value are present for insertion\n    if (!key || !value) {\n      return res\n        .status(400)\n        .json({ error: \"Both key and value must be provided for insertion\" });\n    }\n\n    const patient = await Patient.findByIdAndUpdate(\n      req.params.id,\n      { $set: { [`additionalInfo.${key}`]: value } }, // Use $set to insert the key-value pair\n      { new: true }\n    );\n\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete entry from additional info in a patient by ID\nconst deleteAdditionalInfo = async (req, res) => {\n  try {\n    const { key } = req.params;\n\n    // Check if key is present for deletion\n    if (!key) {\n      return res\n        .status(400)\n        .json({ error: \"Key must be provided for deletion\" });\n    }\n\n    const patient = await Patient.findByIdAndUpdate(\n      req.params.id,\n      { $unset: { [`additionalInfo.${key}`]: 1 } }, // Use $unset to delete the key-value pair\n      { new: true }\n    );\n\n    if (!patient) {\n      return res.status(404).json({ error: \"Patient not found\" });\n    }\n\n    res.status(200).json(patient);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\nmodule.exports = {\n  getAllPatients,\n  getPatient,\n  createPatient,\n  updatePatient,\n  deletePatient,\n  insertAdditionalInfo,\n  deleteAdditionalInfo,\n};\n"]}