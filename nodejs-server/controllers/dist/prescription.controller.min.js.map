{"version":3,"sources":["prescription.controller.js"],"names":["Prescription","require","exports","req","res","prescriptions","regeneratorRuntime","async","_context","prev","next","awrap","find","getAllPrescriptions","sent","json","t0","status","message","stop","getPrescription","prescription","_context2","findById","params","id","abrupt","createPrescription","newPrescription","_context3","body","save","updatePrescription","_context4","findByIdAndUpdate","new","deletePrescription","_context5","remove"],"mappings":"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","file":"prescription.controller.min.js","sourcesContent":["const Prescription = require(\"../models/prescription.model\");\n\nexports.getAllPrescriptions = async (req, res) => {\n  try {\n    const prescriptions = await Prescription.find();\n    res.json(prescriptions);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\nexports.getPrescription = async (req, res) => {\n  try {\n    const prescription = await Prescription.findById(req.params.id);\n    if (!prescription)\n      return res.status(404).json({ message: \"Prescription not found\" });\n    res.json(prescription);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n\nexports.createPrescription = async (req, res) => {\n  const prescription = new Prescription(req.body);\n  try {\n    const newPrescription = await prescription.save();\n    res.status(201).json(newPrescription);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n};\n\nexports.updatePrescription = async (req, res) => {\n  try {\n    const updatePrescription = await Prescription.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      { new: true }\n    );\n    res.json(updatePrescription);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n};\n\nexports.deletePrescription = async (req, res) => {\n  try {\n    const prescription = await Prescription.findById(req.params.id);\n    if (!prescription)\n      return res.status(404).json({ message: \"Prescription not found\" });\n    await prescription.remove();\n    res.json({ message: \"Deleted Prescription\" });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n};\n"]}