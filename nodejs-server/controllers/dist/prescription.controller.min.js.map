{"version":3,"sources":["prescription.controller.js"],"names":["Prescription","require","createPrescription","req","res","prescription","regeneratorRuntime","async","_context","prev","next","awrap","save","status","json","t0","error","message","stop","getAllPrescriptions","prescriptions","_context2","find","sent","findById","params","id","_context4","findByIdAndUpdate","body","new","abrupt","deletePrescriptionById","_context5","findByIdAndDelete","getPrescriptionsByPatientId","_context6","getPrescriptionById","patientId","getPrescriptionsByDoctorId","_context7","doctorId","module","exports","updatePrescriptionById"],"mappings":"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","file":"prescription.controller.min.js","sourcesContent":["const Prescription = require(\"./../models/prescription.model\");\n\n// Create a new prescription\nconst createPrescription = async (req, res) => {\n  try {\n    const prescription = new Prescription(req.body);\n    await prescription.save();\n    res.status(201).json(prescription);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\n// Get all prescriptions\nconst getAllPrescriptions = async (req, res) => {\n  try {\n    const prescriptions = await Prescription.find();\n    res.status(200).json(prescriptions);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get a single prescription by ID\nconst getPrescriptionById = async (req, res) => {\n  try {\n    const prescription = await Prescription.findById(req.params.id);\n    if (!prescription) {\n      return res.status(404).json({ error: \"Prescription not found\" });\n    }\n    res.status(200).json(prescription);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a prescription by ID\nconst updatePrescriptionById = async (req, res) => {\n  try {\n    const prescription = await Prescription.findByIdAndUpdate(\n      req.params.id,\n      req.body,\n      { new: true }\n    );\n    if (!prescription) {\n      return res.status(404).json({ error: \"Prescription not found\" });\n    }\n    res.status(200).json(prescription);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete a prescription by ID\nconst deletePrescriptionById = async (req, res) => {\n  try {\n    const prescription = await Prescription.findByIdAndDelete(req.params.id);\n    if (!prescription) {\n      return res.status(404).json({ error: \"Prescription not found\" });\n    }\n    res.status(204).json(); // No content\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get prescriptions by patientId\nconst getPrescriptionsByPatientId = async (req, res) => {\n  try {\n    const prescriptions = await Prescription.find({\n      patientId: req.params.patientId,\n    });\n    res.status(200).json(prescriptions);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get prescriptions by doctorId\nconst getPrescriptionsByDoctorId = async (req, res) => {\n  try {\n    const prescriptions = await Prescription.find({\n      doctorId: req.params.doctorId,\n    });\n    res.status(200).json(prescriptions);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\nmodule.exports = {\n  createPrescription,\n  getAllPrescriptions,\n  getPrescriptionById,\n  updatePrescriptionById,\n  deletePrescriptionById,\n  getPrescriptionsByPatientId,\n  getPrescriptionsByDoctorId,\n};\n"]}