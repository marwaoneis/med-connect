"use strict";var Doctor=require("./../models/doctor.model"),createDoctor=function(r,t){var n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=new Doctor(r.body),e.next=4,regeneratorRuntime.awrap(n.save());case 4:t.status(201).json(n),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),t.status(400).json({error:e.t0.message});case 10:case"end":return e.stop()}},null,null,[[0,7]])},getAllDoctors=function(e,r){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Doctor.find());case 3:t=e.sent,r.status(200).json(t),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),r.status(500).json({error:"Internal Server Error"});case 10:case"end":return e.stop()}},null,null,[[0,7]])},getDoctorById=function(r,t){var n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Doctor.findById(r.params.id));case 3:if(n=e.sent){e.next=6;break}return e.abrupt("return",t.status(404).json({error:"Doctor not found"}));case 6:t.status(200).json(n),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),t.status(500).json({error:"Internal Server Error"});case 12:case"end":return e.stop()}},null,null,[[0,9]])},updateDoctorById=function(r,t){var n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Doctor.findByIdAndUpdate(r.params.id,r.body,{new:!0}));case 3:if(n=e.sent){e.next=6;break}return e.abrupt("return",t.status(404).json({error:"Doctor not found"}));case 6:t.status(200).json(n),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),t.status(500).json({error:"Internal Server Error"});case 12:case"end":return e.stop()}},null,null,[[0,9]])},deleteDoctorById=function(r,t){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Doctor.findByIdAndDelete(r.params.id));case 3:if(e.sent){e.next=6;break}return e.abrupt("return",t.status(404).json({error:"Doctor not found"}));case 6:t.status(204).json({message:"Doctor Deleted"}),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),t.status(500).json({error:"Internal Server Error"});case 12:case"end":return e.stop()}},null,null,[[0,9]])},getDoctorByUsername=function(r,t){var n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Doctor.findOne({username:r.params.username}));case 3:if(n=e.sent){e.next=6;break}return e.abrupt("return",t.status(404).json({error:"Doctor not found"}));case 6:t.status(200).json(n),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),t.status(500).json({error:"Internal Server Error"});case 12:case"end":return e.stop()}},null,null,[[0,9]])};module.exports={createDoctor:createDoctor,getAllDoctors:getAllDoctors,getDoctorById:getDoctorById,updateDoctorById:updateDoctorById,deleteDoctorById:deleteDoctorById,getDoctorByUsername:getDoctorByUsername};
//# sourceMappingURL=doctor.controller.min.js.map
