"use strict";var Medicine=require("../models/medicine.model"),createMedicine=function(r,n){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=new Medicine(r.body),e.next=4,regeneratorRuntime.awrap(t.save());case 4:n.status(201).json(t),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),n.status(400).json({error:e.t0.message});case 10:case"end":return e.stop()}},null,null,[[0,7]])},getMedicinesByPharmacyId=function(r,n){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Medicine.find({pharmacyId:r.params.pharmacyId}));case 3:t=e.sent,n.status(200).json(t),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),n.status(500).json({error:"Internal Server Error"});case 10:case"end":return e.stop()}},null,null,[[0,7]])},getMedicineById=function(r,n){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,console.log("Attempting to fetch medicine ID:",r.params.id),e.next=4,regeneratorRuntime.awrap(Medicine.findById(r.params.id));case 4:if(t=e.sent){e.next=8;break}return console.log("Medicine not found for ID:",r.params.id),e.abrupt("return",n.status(404).json({error:"Medicine not found"}));case 8:console.log("Medicine found:",t),n.status(200).json(t),e.next=16;break;case 12:e.prev=12,e.t0=e.catch(0),console.error(e.t0),n.status(500).json({error:"Internal Server Error"});case 16:case"end":return e.stop()}},null,null,[[0,12]])},updateMedicineById=function(r,n){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Medicine.findByIdAndUpdate(r.params.id,r.body,{new:!0}));case 3:if(t=e.sent){e.next=6;break}return e.abrupt("return",n.status(404).json({error:"Medicine not found"}));case 6:n.status(200).json(t),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),n.status(500).json({error:"Internal Server Error"});case 12:case"end":return e.stop()}},null,null,[[0,9]])},deleteMedicineById=function(r,n){return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Medicine.findByIdAndDelete(r.params.id));case 3:if(e.sent){e.next=6;break}return e.abrupt("return",n.status(404).json({error:"Medicine not found"}));case 6:n.status(204).json({message:"Patient deleted"}),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),n.status(500).json({error:"Internal Server Error"});case 12:case"end":return e.stop()}},null,null,[[0,9]])};module.exports={createMedicine:createMedicine,getMedicineById:getMedicineById,updateMedicineById:updateMedicineById,deleteMedicineById:deleteMedicineById,getMedicinesByPharmacyId:getMedicinesByPharmacyId};
//# sourceMappingURL=medicine.controller.min.js.map
