{"version":3,"sources":["medicine.controller.js"],"names":["Medicine","require","createMedicine","req","res","medicine","body","save","status","json","error","message","getMedicinesByPharmacyId","find","pharmacyId","params","medicines","getMedicineById","console","log","id","findById","updateMedicineById","findByIdAndUpdate","deleteMedicineById","findByIdAndDelete","module","exports"],"mappings":"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","sourcesContent":["const Medicine = require(\"../models/medicine.model\");\n\n// Create a new medicine\nconst createMedicine = async (req, res) => {\n  try {\n    const medicine = new Medicine(req.body);\n    await medicine.save();\n    res.status(201).json(medicine);\n  } catch (error) {\n    res.status(400).json({ error: error.message });\n  }\n};\n\n// Get all medicines by pharmacyId\nconst getMedicinesByPharmacyId = async (req, res) => {\n  try {\n    const medicines = await Medicine.find({\n      pharmacyId: req.params.pharmacyId,\n    });\n    res.status(200).json(medicines);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Get a single medicine by ID\nconst getMedicineById = async (req, res) => {\n  try {\n    console.log(\"Attempting to fetch medicine ID:\", req.params.id); // This should be your first console.log\n    const medicine = await Medicine.findById(req.params.id);\n    if (!medicine) {\n      console.log(\"Medicine not found for ID:\", req.params.id);\n      return res.status(404).json({ error: \"Medicine not found\" });\n    }\n    console.log(\"Medicine found:\", medicine);\n    res.status(200).json(medicine);\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Update a medicine by ID\nconst updateMedicineById = async (req, res) => {\n  try {\n    const medicine = await Medicine.findByIdAndUpdate(req.params.id, req.body, {\n      new: true,\n    });\n    if (!medicine) {\n      return res.status(404).json({ error: \"Medicine not found\" });\n    }\n    res.status(200).json(medicine);\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\n// Delete a medicine by ID\nconst deleteMedicineById = async (req, res) => {\n  try {\n    const medicine = await Medicine.findByIdAndDelete(req.params.id);\n    if (!medicine) {\n      return res.status(404).json({ error: \"Medicine not found\" });\n    }\n    res.status(204).json({ message: \"Patient deleted\" });\n  } catch (error) {\n    res.status(500).json({ error: \"Internal Server Error\" });\n  }\n};\n\nmodule.exports = {\n  createMedicine,\n  getMedicineById,\n  updateMedicineById,\n  deleteMedicineById,\n  getMedicinesByPharmacyId,\n};\n"],"file":"medicine.controller.dev.js"}